{"version":3,"sources":["store/Cities.js","context/WeatherContext.js","components/WeatherApp/Weather.js","components/WeatherApp/WeatherContainer.js","App.js","reportWebVitals.js","index.js"],"names":["cities","initialWeather","datetime","high_temp","weather","icon","min_temp","WeatherContext","createContext","WeatherProvider","children","useState","localStorage","getItem","cityName","setCityName","setWeather","loading","setLoading","useEffect","setItem","axios","then","res","data","catch","err","console","log","values","handleCityNameUpdate","e","target","value","Provider","Weather","className","name","onChange","map","city","i","WeatherContainer","useContext","w","idOption","day","Date","getDay","icons","content","id","style","description","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f1fbb18.chunk.js","sourcesContent":["export const cities = [\n    \"Istanbul\", \"Ankara\", \"Izmir\", \"Bursa\", \"Antalya\", \"Adana\", \"Konya\", \"Gaziantep\", \"Mersin\", \"Diyarbakir\", \"Kayseri\", \"Samsun\", \"Denizli\", \"Eskisehir\", \"Malatya\", \"Sanliurfa\", \"Kahramanmaras\", \"Erzurum\"\n]","import { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { cities } from \"../store/Cities\"\n\nconst initialWeather = [{\n    datetime: '',\n    high_temp: '',\n    weather: {\n        icon: ''\n    },\n    min_temp: ''\n}];\n\nconst WeatherContext = createContext(initialWeather)\n\n\nexport const WeatherProvider = ({children}) => {\n    const [cityName, setCityName] = useState(localStorage.getItem('cityName') || \"Antalya\")\n    const [weather, setWeather] = useState([])\n    const [loading, setLoading] = useState(true)\n\n\n    useEffect(() => {\n        setWeather(initialWeather)\n        localStorage.setItem('cityName', cityName)\n        axios(`https://api.weatherbit.io/v2.0/forecast/daily?city=${cityName}&key=7ca7b733f1ab4a15ac97c142ea2c731f&days=8`)\n            .then((res) => {\n                setWeather(res.data.data)\n            }).then(() => setLoading(false))\n            .catch((err) => console.log(err))\n    }, [cityName])\n\n    const handleCityNameUpdate = (e) => {\n        setCityName(e.target.value)\n    }\n\n\n    const values = {\n        weather,\n        loading,\n        handleCityNameUpdate,\n        cities,\n        cityName\n    }\n\n    return (\n        <WeatherContext.Provider value={values}>\n            {children}\n        </WeatherContext.Provider>\n    )\n}\n\nexport const useWeather = () => useContext(WeatherContext);","import React from 'react';\n\nconst Weather = ({loading, handleCityNameUpdate, res, cities, cityName}) => {\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"selectContainer\">\n                <div className=\"select row chosen-wrapper\" >\n                    <select className=\"form-control form-control-lg\" name=\"weatherSelect\"\n                            onChange={handleCityNameUpdate}\n                    value={cityName}>\n                        {cities.map((city, i) => <option key={i} value={city} >{city}</option>)}\n                    </select>\n                </div>\n            </div>\n            <div className=\"weather row\">\n                {loading ? \"Loading...\" : res}\n            </div>\n        </div>\n    );\n};\n\nexport default Weather;","import React from 'react';\nimport { useWeather } from \"../../context/WeatherContext\";\nimport Weather from \"./Weather\";\n\nconst WeatherContainer = () => {\n    const { weather, loading, handleCityNameUpdate, cities, cityName} = useWeather()\n    const res = (weather.map((w, i) => {\n        const idOption = `option${i}`\n        let day = new Date(w.datetime).getDay()\n        switch(day) {\n            case 0:\n                day = \"Sun\";\n                break\n            case 1:\n                day = \"Mon\";\n                break\n            case 2:\n                day = \"Tue\";\n                break\n            case 3:\n                day = \"Wed\";\n                break\n            case 4:\n                day = \"Thu\";\n                break\n            case 5:\n                day = \"Fri\";\n                break\n            case 6:\n                day = \"Sat\";\n                break\n            default:\n                day = \"\";\n        }\n        const icons = {\n            content: `url(\"https://www.weatherbit.io/static/img/icons/${w.weather.icon}.png\")`\n        }\n        return <div key={i} id={idOption} className=\"singleWeather col-lg col-md col-sm\">\n            <div className=\"day\">{day}</div>\n            <div><span id=\"weatherIcon\" style={icons}> </span></div>\n            <div className=\"temp\">\n                {w.high_temp}&deg;  <span className=\"minTemp\">{w.min_temp}&deg;</span>\n            </div>\n            <div className=\"description\">\n                {w.weather.description}\n            </div>\n        </div>\n    }))\n    return (\n        <Weather loading={loading} cities={cities} cityName={cityName} handleCityNameUpdate={handleCityNameUpdate}\n                 res={res} />\n    );\n}\n\nexport default WeatherContainer;","import './App.css';\nimport {WeatherProvider} from \"./context/WeatherContext\";\nimport WeatherContainer from \"./components/WeatherApp/WeatherContainer\";\n\nfunction App() {\n  return (\n      <WeatherProvider>\n          <WeatherContainer />\n      </WeatherProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}